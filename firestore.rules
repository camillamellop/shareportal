rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Regra para usuários - podem ler/escrever apenas seus próprios dados
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Regra para aeronaves - leitura para autenticados, escrita para admin/manager
    match /aeronaves/{document} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        (getUserRole() == 'admin' || getUserRole() == 'manager');
    }
    
    // Regra para voos - leitura para autenticados, escrita para pilotos/admin
    match /voos/{document} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        (getUserRole() in ['admin', 'manager', 'pilot']);
    }
    
    // Regra para tarefas - usuários podem ver suas tarefas
    match /tasks/{document} {
      allow read: if request.auth != null && 
        (resource.data.assignedTo == request.auth.uid || getUserRole() in ['admin', 'manager']);
      allow write: if request.auth != null && 
        (resource.data.assignedTo == request.auth.uid || getUserRole() in ['admin', 'manager']);
    }
    
    // Regra para mensagens - usuários podem ver mensagens direcionadas a eles
    match /messages/{document} {
      allow read: if request.auth != null && 
        (request.auth.uid in resource.data.recipients || resource.data.sender == request.auth.uid);
      allow write: if request.auth != null;
    }
    
    // Regra para contatos - leitura para autenticados, escrita para admin/manager
    match /contacts/{document} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && getUserRole() in ['admin', 'manager'];
    }
    
    // Regra para aniversários - leitura para autenticados, escrita para admin/manager  
    match /birthdays/{document} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && getUserRole() in ['admin', 'manager'];
    }
    
    // Regra para clientes - leitura para autenticados, escrita para admin/manager
    match /clientes/{document} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && getUserRole() in ['admin', 'manager'];
    }
    
    // Regra para postos de combustível
    match /fuelStations/{document} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && getUserRole() in ['admin', 'manager'];
    }
    
    // Regra para hotéis
    match /hotels/{document} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && getUserRole() in ['admin', 'manager'];
    }
    
    // Regra para abastecimento
    match /abastecimento/{document} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && getUserRole() in ['admin', 'manager'];
    }
    
    // Regra para relatórios de viagem
    match /relatorios_viagem/{document} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        (resource.data.tripulante == request.auth.uid || getUserRole() in ['admin', 'manager']);
    }
    
    // Regra para ressarcimentos
    match /ressarcimentos/{document} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && getUserRole() in ['admin', 'manager'];
    }
    
    // Função auxiliar para obter o role do usuário
    function getUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }
  }
}